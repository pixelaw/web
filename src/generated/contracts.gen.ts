
// Generated by dojo-bindgen on Sun, 25 Aug 2024 23:42:19 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `pixelaw-snake_actions` contract
    function snake_actions() {
        const contract_name = "snake_actions";

        
        // Call the `init` system with the specified Account and calldata
        const init = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "init",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `interact` system with the specified Account and calldata
        const interact = async (props: { account: Account, default_params: models.DefaultParameters, direction: models.Direction }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "interact",
                        calldata: [props.default_params,
                ["None", "Left", "Right", "Up", "Down"].indexOf(props.direction.type)],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `move` system with the specified Account and calldata
        const move = async (props: { account: Account, owner: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "move",
                        calldata: [props.owner],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `on_pre_update` system with the specified Account and calldata
        const on_pre_update = async (props: { account: Account, pixel_update: models.PixelUpdate, app_caller: models.App, player_caller: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "on_pre_update",
                        calldata: [props.pixel_update,
                props.app_caller.system,
                    props.app_caller.name,
                    props.app_caller.manifest,
                    props.app_caller.icon,
                    props.app_caller.action,
                props.player_caller],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `on_post_update` system with the specified Account and calldata
        const on_post_update = async (props: { account: Account, pixel_update: models.PixelUpdate, app_caller: models.App, player_caller: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "on_post_update",
                        calldata: [props.pixel_update,
                props.app_caller.system,
                    props.app_caller.name,
                    props.app_caller.manifest,
                    props.app_caller.icon,
                    props.app_caller.action,
                props.player_caller],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            init, interact, move, on_pre_update, on_post_update, world
        };
    }

    // System definitions for `pixelaw-paint_actions` contract
    function paint_actions() {
        const contract_name = "paint_actions";

        
        // Call the `on_pre_update` system with the specified Account and calldata
        const on_pre_update = async (props: { account: Account, pixel_update: models.PixelUpdate, app_caller: models.App, player_caller: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "on_pre_update",
                        calldata: [props.pixel_update,
                props.app_caller.system,
                    props.app_caller.name,
                    props.app_caller.manifest,
                    props.app_caller.icon,
                    props.app_caller.action,
                props.player_caller],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `on_post_update` system with the specified Account and calldata
        const on_post_update = async (props: { account: Account, pixel_update: models.PixelUpdate, app_caller: models.App, player_caller: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "on_post_update",
                        calldata: [props.pixel_update,
                props.app_caller.system,
                    props.app_caller.name,
                    props.app_caller.manifest,
                    props.app_caller.icon,
                    props.app_caller.action,
                props.player_caller],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `init` system with the specified Account and calldata
        const init = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "init",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `interact` system with the specified Account and calldata
        const interact = async (props: { account: Account, default_params: models.DefaultParameters }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "interact",
                        calldata: [props.default_params],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `put_color` system with the specified Account and calldata
        const put_color = async (props: { account: Account, default_params: models.DefaultParameters }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "put_color",
                        calldata: [props.default_params],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `fade` system with the specified Account and calldata
        const fade = async (props: { account: Account, default_params: models.DefaultParameters }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "fade",
                        calldata: [props.default_params],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `pixel_row` system with the specified Account and calldata
        const pixel_row = async (props: { account: Account, default_params: models.DefaultParameters, image_data: RecsType.BigIntArray }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "pixel_row",
                        calldata: [props.default_params,
                ...props.image_data],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            on_pre_update, on_post_update, init, interact, put_color, fade, pixel_row, world
        };
    }

    // System definitions for `pixelaw-actions` contract
    function actions() {
        const contract_name = "actions";

        
        // Call the `init` system with the specified Account and calldata
        const init = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "init",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `update_permission` system with the specified Account and calldata
        const update_permission = async (props: { account: Account, for_system: bigint, permission: models.Permission }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_permission",
                        calldata: [props.for_system,
                props.permission.app,
                    props.permission.color,
                    props.permission.owner,
                    props.permission.text,
                    props.permission.timestamp,
                    props.permission.action],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `update_app` system with the specified Account and calldata
        const update_app = async (props: { account: Account, name: bigint, icon: bigint, manifest: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_app",
                        calldata: [props.name,
                props.icon,
                props.manifest],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `has_write_access` system with the specified Account and calldata
        const has_write_access = async (props: { account: Account, for_player: bigint, for_system: bigint, pixel: models.Pixel, pixel_update: models.PixelUpdate }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "has_write_access",
                        calldata: [props.for_player,
                props.for_system,
                props.pixel.x,
                    props.pixel.y,
                    props.pixel.app,
                    props.pixel.color,
                    props.pixel.created_at,
                    props.pixel.updated_at,
                    props.pixel.timestamp,
                    props.pixel.owner,
                    props.pixel.text,
                    props.pixel.action,
                props.pixel_update],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `process_queue` system with the specified Account and calldata
        const process_queue = async (props: { account: Account, id: bigint, timestamp: number, called_system: bigint, selector: bigint, calldata: RecsType.BigIntArray }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "process_queue",
                        calldata: [props.id,
                props.timestamp,
                props.called_system,
                props.selector,
                ...props.calldata],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `schedule_queue` system with the specified Account and calldata
        const schedule_queue = async (props: { account: Account, timestamp: number, called_system: bigint, selector: bigint, calldata: RecsType.BigIntArray }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "schedule_queue",
                        calldata: [props.timestamp,
                props.called_system,
                props.selector,
                ...props.calldata],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `update_pixel` system with the specified Account and calldata
        const update_pixel = async (props: { account: Account, for_player: bigint, for_system: bigint, pixel_update: models.PixelUpdate }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "update_pixel",
                        calldata: [props.for_player,
                props.for_system,
                props.pixel_update],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `new_app` system with the specified Account and calldata
        const new_app = async (props: { account: Account, system: bigint, name: bigint, icon: bigint, manifest: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "new_app",
                        calldata: [props.system,
                props.name,
                props.icon,
                props.manifest],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_system_address` system with the specified Account and calldata
        const get_system_address = async (props: { account: Account, for_system: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_system_address",
                        calldata: [props.for_system],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_player_address` system with the specified Account and calldata
        const get_player_address = async (props: { account: Account, for_player: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_player_address",
                        calldata: [props.for_player],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `alert_player` system with the specified Account and calldata
        const alert_player = async (props: { account: Account, position: models.Position, player: bigint, message: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "alert_player",
                        calldata: [props.position,
                props.player,
                props.message],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `set_instruction` system with the specified Account and calldata
        const set_instruction = async (props: { account: Account, selector: bigint, instruction: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "set_instruction",
                        calldata: [props.selector,
                props.instruction],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "pixelaw"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            init, update_permission, update_app, has_write_access, process_queue, schedule_queue, update_pixel, new_app, get_system_address, get_player_address, alert_player, set_instruction, world
        };
    }

    return {
        snake_actions: snake_actions(),
        paint_actions: paint_actions(),
        actions: actions()
    };
}
