
// Generated by dojo-bindgen on Sun, 25 Aug 2024 23:42:19 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};

// Type definition for `pixelaw::core::models::permissions::Permission` struct
export interface Permission {
    app: Boolean;
    color: Boolean;
    owner: Boolean;
    text: Boolean;
    timestamp: Boolean;
    action: Boolean;
    
}
export const PermissionDefinition = {
    app: RecsType.Boolean,
    color: RecsType.Boolean,
    owner: RecsType.Boolean,
    text: RecsType.Boolean,
    timestamp: RecsType.Boolean,
    action: RecsType.Boolean,
    
};

// Type definition for `pixelaw::core::models::permissions::Permissions` struct
export interface Permissions {
    allowing_app: BigInt;
    allowed_app: BigInt;
    permission: Permission;
    
}
export const PermissionsDefinition = {
    allowing_app: RecsType.BigInt,
    allowed_app: RecsType.BigInt,
    permission: PermissionDefinition,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};


// Type definition for `pixelaw::core::models::registry::CoreActionsAddress` struct
export interface CoreActionsAddress {
    key: BigInt;
    value: BigInt;
    
}
export const CoreActionsAddressDefinition = {
    key: RecsType.BigInt,
    value: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::models::pixel::Pixel` struct
export interface Pixel {
    x: Number;
    y: Number;
    app: BigInt;
    color: Number;
    created_at: Number;
    updated_at: Number;
    timestamp: Number;
    owner: BigInt;
    text: BigInt;
    action: BigInt;
    
}
export const PixelDefinition = {
    x: RecsType.Number,
    y: RecsType.Number,
    app: RecsType.BigInt,
    color: RecsType.Number,
    created_at: RecsType.Number,
    updated_at: RecsType.Number,
    timestamp: RecsType.Number,
    owner: RecsType.BigInt,
    text: RecsType.BigInt,
    action: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::utils::Direction` enum
export type Direction = { type: 'None'; } | { type: 'Left'; } | { type: 'Right'; } | { type: 'Up'; } | { type: 'Down'; };

export const DirectionDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `pixelaw::apps::snake::app::Snake` struct
export interface Snake {
    owner: BigInt;
    length: Number;
    first_segment_id: Number;
    last_segment_id: Number;
    direction: Direction;
    color: Number;
    text: BigInt;
    is_dying: Boolean;
    
}
export const SnakeDefinition = {
    owner: RecsType.BigInt,
    length: RecsType.Number,
    first_segment_id: RecsType.Number,
    last_segment_id: RecsType.Number,
    direction: DirectionDefinition,
    color: RecsType.Number,
    text: RecsType.BigInt,
    is_dying: RecsType.Boolean,
    
};


// Type definition for `pixelaw::core::models::registry::AppUser` struct
export interface AppUser {
    system: BigInt;
    player: BigInt;
    action: BigInt;
    
}
export const AppUserDefinition = {
    system: RecsType.BigInt,
    player: RecsType.BigInt,
    action: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::models::registry::AppName` struct
export interface AppName {
    name: BigInt;
    system: BigInt;
    
}
export const AppNameDefinition = {
    name: RecsType.BigInt,
    system: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::models::registry::App` struct
export interface App {
    system: BigInt;
    name: BigInt;
    manifest: BigInt;
    icon: BigInt;
    action: BigInt;
    
}
export const AppDefinition = {
    system: RecsType.BigInt,
    name: RecsType.BigInt,
    manifest: RecsType.BigInt,
    icon: RecsType.BigInt,
    action: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::models::registry::Instruction` struct
export interface Instruction {
    system: BigInt;
    selector: BigInt;
    instruction: BigInt;
    
}
export const InstructionDefinition = {
    system: RecsType.BigInt,
    selector: RecsType.BigInt,
    instruction: RecsType.BigInt,
    
};


// Type definition for `pixelaw::core::models::queue::QueueItem` struct
export interface QueueItem {
    id: BigInt;
    valid: Boolean;
    
}
export const QueueItemDefinition = {
    id: RecsType.BigInt,
    valid: RecsType.Boolean,
    
};


// Type definition for `pixelaw::apps::snake::app::SnakeSegment` struct
export interface SnakeSegment {
    id: Number;
    previous_id: Number;
    next_id: Number;
    x: Number;
    y: Number;
    pixel_original_color: Number;
    pixel_original_text: BigInt;
    pixel_original_app: BigInt;
    
}
export const SnakeSegmentDefinition = {
    id: RecsType.Number,
    previous_id: RecsType.Number,
    next_id: RecsType.Number,
    x: RecsType.Number,
    y: RecsType.Number,
    pixel_original_color: RecsType.Number,
    pixel_original_text: RecsType.BigInt,
    pixel_original_app: RecsType.BigInt,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `pixelaw::core::models::permissions::Permissions` model
        Permissions: (() => {
            return defineComponent(
                world,
                {
                    allowing_app: RecsType.BigInt,
                    allowed_app: RecsType.BigInt,
                    permission: PermissionDefinition,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "Permissions",
                        types: ["ContractAddress", "ContractAddress"],
                        customTypes: ["Permission"],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::registry::CoreActionsAddress` model
        CoreActionsAddress: (() => {
            return defineComponent(
                world,
                {
                    key: RecsType.BigInt,
                    value: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "CoreActionsAddress",
                        types: ["felt252", "ContractAddress"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::pixel::Pixel` model
        Pixel: (() => {
            return defineComponent(
                world,
                {
                    x: RecsType.Number,
                    y: RecsType.Number,
                    app: RecsType.BigInt,
                    color: RecsType.Number,
                    created_at: RecsType.Number,
                    updated_at: RecsType.Number,
                    timestamp: RecsType.Number,
                    owner: RecsType.BigInt,
                    text: RecsType.BigInt,
                    action: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "Pixel",
                        types: ["u32", "u32", "ContractAddress", "u32", "u64", "u64", "u64", "ContractAddress", "felt252", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::apps::snake::app::Snake` model
        Snake: (() => {
            return defineComponent(
                world,
                {
                    owner: RecsType.BigInt,
                    length: RecsType.Number,
                    first_segment_id: RecsType.Number,
                    last_segment_id: RecsType.Number,
                    direction: RecsType.String,
                    color: RecsType.Number,
                    text: RecsType.BigInt,
                    is_dying: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "Snake",
                        types: ["ContractAddress", "u8", "u32", "u32", "Direction", "u32", "felt252", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::registry::AppUser` model
        AppUser: (() => {
            return defineComponent(
                world,
                {
                    system: RecsType.BigInt,
                    player: RecsType.BigInt,
                    action: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "AppUser",
                        types: ["ContractAddress", "ContractAddress", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::registry::AppName` model
        AppName: (() => {
            return defineComponent(
                world,
                {
                    name: RecsType.BigInt,
                    system: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "AppName",
                        types: ["felt252", "ContractAddress"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::registry::App` model
        App: (() => {
            return defineComponent(
                world,
                {
                    system: RecsType.BigInt,
                    name: RecsType.BigInt,
                    manifest: RecsType.BigInt,
                    icon: RecsType.BigInt,
                    action: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "App",
                        types: ["ContractAddress", "felt252", "felt252", "felt252", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::registry::Instruction` model
        Instruction: (() => {
            return defineComponent(
                world,
                {
                    system: RecsType.BigInt,
                    selector: RecsType.BigInt,
                    instruction: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "Instruction",
                        types: ["ContractAddress", "felt252", "felt252"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::core::models::queue::QueueItem` model
        QueueItem: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.BigInt,
                    valid: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "QueueItem",
                        types: ["felt252", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `pixelaw::apps::snake::app::SnakeSegment` model
        SnakeSegment: (() => {
            return defineComponent(
                world,
                {
                    id: RecsType.Number,
                    previous_id: RecsType.Number,
                    next_id: RecsType.Number,
                    x: RecsType.Number,
                    y: RecsType.Number,
                    pixel_original_color: RecsType.Number,
                    pixel_original_text: RecsType.BigInt,
                    pixel_original_app: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "pixelaw",
                        name: "SnakeSegment",
                        types: ["u32", "u32", "u32", "u32", "u32", "u32", "felt252", "ContractAddress"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
